buildscript {


    ext {
        jooqVersion = '3.17.5'
        postgresVersion = '42.5.0'
        databaseDriver = 'org.postgresql.Driver'
        databaseURL = "jdbc:postgresql://localhost:5432/AdvertismentService"
        databaseUser = "postgres"
        databasePassword = "Landrover2013"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }


    dependencies {
        classpath "org.jooq:jooq-codegen:${jooqVersion}",
                "org.jooq:jooq:${jooqVersion}",
                "org.jooq:jooq-meta:${jooqVersion}",
                "org.postgresql:postgresql:${postgresVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'nu.studer.jooq'


import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

import java.util.regex.Matcher


task generateJooq {
    def configuration = new Configuration()
            .withJdbc(
                    new Jdbc()
                            .withDriver(databaseDriver)
                            .withUrl(databaseURL)
                            .withUser(databaseUser)
                            .withPassword(databasePassword))
            .withGenerator(
                    new Generator()
                            .withDatabase(new Database().withExcludes("databasechangeloglock|databasechangelog").withInputSchema("public"))
                            .withGenerate(
                                    new Generate()
                                            .withRoutines(false)
                                            .withPojos(true)
                                            .withDaos(false)
                            ).withTarget(
                            new Target()
                                    .withPackageName('com.example.advertismentService.model.jooq.schema')
                                    .withDirectory(projectDir.toString() + '/src/main/java')
                    ).withStrategy(
                            new Strategy()
                                    .withMatchers(
                                            new Matchers()
                                                    .withTables(new MatchersTableType()
                                                            .withExpression("^flat")
                                                            .withTableIdentifier(new MatcherRule()
                                                                    .withExpression('$0_Entity')
                                                                    .withTransform(MatcherTransformType.UPPER)
                                                            )
                                                            .withPojoClass(new MatcherRule().withExpression('$0_Entity').withTransform(MatcherTransformType.PASCAL))
                                                            .withPojoExtends('com.example.advertismentService.model.jooq.schema.tables.pojos.RealtyEntity')
                                                    )
                                                    .withTables(new MatchersTableType()
                                                            .withExpression("^House")
                                                            .withTableIdentifier(new MatcherRule()
                                                                    .withExpression('$0_Entity')
                                                                    .withTransform(MatcherTransformType.UPPER)
                                                            )
                                                            .withPojoClass(new MatcherRule().withExpression('$0_Entity').withTransform(MatcherTransformType.PASCAL))
                                                            .withPojoExtends('com.example.advertismentService.model.jooq.schema.tables.pojos.RealtyEntity')
                                                    )
                                                    .withTables(new MatchersTableType()
                                                            .withTableIdentifier(new MatcherRule()
                                                                    .withExpression('$0_Entity')
                                                                    .withTransform(MatcherTransformType.UPPER)
                                                            )
                                                            .withPojoClass(new MatcherRule().withExpression('$0_Entity').withTransform(MatcherTransformType.PASCAL))
                                                            .withPojoExtends('com.example.advertismentService.entity.Entity')
                                                    )
                                    )
                    )
            )

    GenerationTool.generate(configuration)
}

