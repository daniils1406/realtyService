/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables.records;


import com.example.advertismentService.model.jooq.schema.enums.Material;
import com.example.advertismentService.model.jooq.schema.tables.House;
import com.example.advertismentService.model.jooq.schema.tables.pojos.HouseEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HouseRecord extends TableRecordImpl<HouseRecord> implements Record4<UUID, Double, Material, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.house.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.house.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.house.area_square</code>.
     */
    public void setAreaSquare(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.house.area_square</code>.
     */
    public Double getAreaSquare() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.house.material</code>.
     */
    public void setMaterial(Material value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.house.material</code>.
     */
    public Material getMaterial() {
        return (Material) get(2);
    }

    /**
     * Setter for <code>public.house.levels</code>.
     */
    public void setLevels(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.house.levels</code>.
     */
    public Integer getLevels() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Double, Material, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, Double, Material, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return House.HOUSE_ENTITY.ID;
    }

    @Override
    public Field<Double> field2() {
        return House.HOUSE_ENTITY.AREA_SQUARE;
    }

    @Override
    public Field<Material> field3() {
        return House.HOUSE_ENTITY.MATERIAL;
    }

    @Override
    public Field<Integer> field4() {
        return House.HOUSE_ENTITY.LEVELS;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getAreaSquare();
    }

    @Override
    public Material component3() {
        return getMaterial();
    }

    @Override
    public Integer component4() {
        return getLevels();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getAreaSquare();
    }

    @Override
    public Material value3() {
        return getMaterial();
    }

    @Override
    public Integer value4() {
        return getLevels();
    }

    @Override
    public HouseRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public HouseRecord value2(Double value) {
        setAreaSquare(value);
        return this;
    }

    @Override
    public HouseRecord value3(Material value) {
        setMaterial(value);
        return this;
    }

    @Override
    public HouseRecord value4(Integer value) {
        setLevels(value);
        return this;
    }

    @Override
    public HouseRecord values(UUID value1, Double value2, Material value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HouseRecord
     */
    public HouseRecord() {
        super(House.HOUSE_ENTITY);
    }

    /**
     * Create a detached, initialised HouseRecord
     */
    public HouseRecord(UUID id, Double areaSquare, Material material, Integer levels) {
        super(House.HOUSE_ENTITY);

        setId(id);
        setAreaSquare(areaSquare);
        setMaterial(material);
        setLevels(levels);
    }

    /**
     * Create a detached, initialised HouseRecord
     */
    public HouseRecord(HouseEntity value) {
        super(House.HOUSE_ENTITY);

        if (value != null) {
            setId(value.getId());
            setAreaSquare(value.getAreaSquare());
            setMaterial(value.getMaterial());
            setLevels(value.getLevels());
        }
    }
}
