/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.tables.records.RegionsAndAgencyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegionsAndAgency extends TableImpl<RegionsAndAgencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.regions_and_agency</code>
     */
    public static final RegionsAndAgency REGIONS_AND_AGENCY_ENTITY = new RegionsAndAgency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegionsAndAgencyRecord> getRecordType() {
        return RegionsAndAgencyRecord.class;
    }

    /**
     * The column <code>public.regions_and_agency.agency_id</code>.
     */
    public final TableField<RegionsAndAgencyRecord, UUID> AGENCY_ID = createField(DSL.name("agency_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.regions_and_agency.region_code</code>.
     */
    public final TableField<RegionsAndAgencyRecord, Integer> REGION_CODE = createField(DSL.name("region_code"), SQLDataType.INTEGER, this, "");

    private RegionsAndAgency(Name alias, Table<RegionsAndAgencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegionsAndAgency(Name alias, Table<RegionsAndAgencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.regions_and_agency</code> table reference
     */
    public RegionsAndAgency(String alias) {
        this(DSL.name(alias), REGIONS_AND_AGENCY_ENTITY);
    }

    /**
     * Create an aliased <code>public.regions_and_agency</code> table reference
     */
    public RegionsAndAgency(Name alias) {
        this(alias, REGIONS_AND_AGENCY_ENTITY);
    }

    /**
     * Create a <code>public.regions_and_agency</code> table reference
     */
    public RegionsAndAgency() {
        this(DSL.name("regions_and_agency"), null);
    }

    public <O extends Record> RegionsAndAgency(Table<O> child, ForeignKey<O, RegionsAndAgencyRecord> key) {
        super(child, key, REGIONS_AND_AGENCY_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<RegionsAndAgencyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REGIONS_AND_AGENCY__FK_TO_AGENCY);
    }

    private transient Agency _agency;

    /**
     * Get the implicit join path to the <code>public.agency</code> table.
     */
    public Agency agency() {
        if (_agency == null)
            _agency = new Agency(this, Keys.REGIONS_AND_AGENCY__FK_TO_AGENCY);

        return _agency;
    }

    @Override
    public RegionsAndAgency as(String alias) {
        return new RegionsAndAgency(DSL.name(alias), this);
    }

    @Override
    public RegionsAndAgency as(Name alias) {
        return new RegionsAndAgency(alias, this);
    }

    @Override
    public RegionsAndAgency as(Table<?> alias) {
        return new RegionsAndAgency(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionsAndAgency rename(String name) {
        return new RegionsAndAgency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionsAndAgency rename(Name name) {
        return new RegionsAndAgency(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionsAndAgency rename(Table<?> name) {
        return new RegionsAndAgency(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
