/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.tables.records.RegionsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Regions extends TableImpl<RegionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.regions</code>
     */
    public static final Regions REGIONS_ENTITY = new Regions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegionsRecord> getRecordType() {
        return RegionsRecord.class;
    }

    /**
     * The column <code>public.regions.code</code>.
     */
    public final TableField<RegionsRecord, Integer> CODE = createField(DSL.name("code"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.regions.region_name</code>.
     */
    public final TableField<RegionsRecord, String> REGION_NAME = createField(DSL.name("region_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.regions.sales_price</code>.
     */
    public final TableField<RegionsRecord, Integer> SALES_PRICE = createField(DSL.name("sales_price"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.regions.rent_price</code>.
     */
    public final TableField<RegionsRecord, Integer> RENT_PRICE = createField(DSL.name("rent_price"), SQLDataType.INTEGER, this, "");

    private Regions(Name alias, Table<RegionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Regions(Name alias, Table<RegionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.regions</code> table reference
     */
    public Regions(String alias) {
        this(DSL.name(alias), REGIONS_ENTITY);
    }

    /**
     * Create an aliased <code>public.regions</code> table reference
     */
    public Regions(Name alias) {
        this(alias, REGIONS_ENTITY);
    }

    /**
     * Create a <code>public.regions</code> table reference
     */
    public Regions() {
        this(DSL.name("regions"), null);
    }

    public <O extends Record> Regions(Table<O> child, ForeignKey<O, RegionsRecord> key) {
        super(child, key, REGIONS_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<RegionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REGIONS_CODE_KEY);
    }

    @Override
    public Regions as(String alias) {
        return new Regions(DSL.name(alias), this);
    }

    @Override
    public Regions as(Name alias) {
        return new Regions(alias, this);
    }

    @Override
    public Regions as(Table<?> alias) {
        return new Regions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Regions rename(String name) {
        return new Regions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Regions rename(Name name) {
        return new Regions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Regions rename(Table<?> name) {
        return new Regions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
