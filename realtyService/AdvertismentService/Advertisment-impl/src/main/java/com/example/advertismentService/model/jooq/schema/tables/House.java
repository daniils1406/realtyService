/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.enums.Material;
import com.example.advertismentService.model.jooq.schema.tables.records.HouseRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class House extends TableImpl<HouseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.house</code>
     */
    public static final House HOUSE_ENTITY = new House();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseRecord> getRecordType() {
        return HouseRecord.class;
    }

    /**
     * The column <code>public.house.id</code>.
     */
    public final TableField<HouseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.house.area_square</code>.
     */
    public final TableField<HouseRecord, Double> AREA_SQUARE = createField(DSL.name("area_square"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.house.material</code>.
     */
    public final TableField<HouseRecord, Material> MATERIAL = createField(DSL.name("material"), SQLDataType.VARCHAR.asEnumDataType(com.example.advertismentService.model.jooq.schema.enums.Material.class), this, "");

    /**
     * The column <code>public.house.levels</code>.
     */
    public final TableField<HouseRecord, Integer> LEVELS = createField(DSL.name("levels"), SQLDataType.INTEGER, this, "");

    private House(Name alias, Table<HouseRecord> aliased) {
        this(alias, aliased, null);
    }

    private House(Name alias, Table<HouseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.house</code> table reference
     */
    public House(String alias) {
        this(DSL.name(alias), HOUSE_ENTITY);
    }

    /**
     * Create an aliased <code>public.house</code> table reference
     */
    public House(Name alias) {
        this(alias, HOUSE_ENTITY);
    }

    /**
     * Create a <code>public.house</code> table reference
     */
    public House() {
        this(DSL.name("house"), null);
    }

    public <O extends Record> House(Table<O> child, ForeignKey<O, HouseRecord> key) {
        super(child, key, HOUSE_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<HouseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.HOUSE_ID_KEY);
    }

    @Override
    public List<ForeignKey<HouseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOUSE__FK_TOREALTY);
    }

    private transient Realty _realty;

    /**
     * Get the implicit join path to the <code>public.realty</code> table.
     */
    public Realty realty() {
        if (_realty == null)
            _realty = new Realty(this, Keys.HOUSE__FK_TOREALTY);

        return _realty;
    }

    @Override
    public House as(String alias) {
        return new House(DSL.name(alias), this);
    }

    @Override
    public House as(Name alias) {
        return new House(alias, this);
    }

    @Override
    public House as(Table<?> alias) {
        return new House(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(String name) {
        return new House(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(Name name) {
        return new House(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(Table<?> name) {
        return new House(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Double, Material, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super Double, ? super Material, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super Double, ? super Material, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
