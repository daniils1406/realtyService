/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.enums.Agentlevel;
import com.example.advertismentService.model.jooq.schema.enums.Status;
import com.example.advertismentService.model.jooq.schema.tables.records.AgencyRecord;

import java.time.LocalDate;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Agency extends TableImpl<AgencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.agency</code>
     */
    public static final Agency AGENCY_ENTITY = new Agency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgencyRecord> getRecordType() {
        return AgencyRecord.class;
    }

    /**
     * The column <code>public.agency.id</code>.
     */
    public final TableField<AgencyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.agency.name</code>.
     */
    public final TableField<AgencyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.agency.description</code>.
     */
    public final TableField<AgencyRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.agency.phone_number</code>.
     */
    public final TableField<AgencyRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.agency.link_for_website</code>.
     */
    public final TableField<AgencyRecord, String> LINK_FOR_WEBSITE = createField(DSL.name("link_for_website"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.agency.level</code>.
     */
    public final TableField<AgencyRecord, Agentlevel> LEVEL = createField(DSL.name("level"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.example.advertismentService.model.jooq.schema.enums.Agentlevel.class), this, "");

    /**
     * The column <code>public.agency.status</code>.
     */
    public final TableField<AgencyRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.example.advertismentService.model.jooq.schema.enums.Status.class), this, "");

    /**
     * The column <code>public.agency.insert_date</code>.
     */
    public final TableField<AgencyRecord, LocalDate> INSERT_DATE = createField(DSL.name("insert_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Agency(Name alias, Table<AgencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Agency(Name alias, Table<AgencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.agency</code> table reference
     */
    public Agency(String alias) {
        this(DSL.name(alias), AGENCY_ENTITY);
    }

    /**
     * Create an aliased <code>public.agency</code> table reference
     */
    public Agency(Name alias) {
        this(alias, AGENCY_ENTITY);
    }

    /**
     * Create a <code>public.agency</code> table reference
     */
    public Agency() {
        this(DSL.name("agency"), null);
    }

    public <O extends Record> Agency(Table<O> child, ForeignKey<O, AgencyRecord> key) {
        super(child, key, AGENCY_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AgencyRecord> getPrimaryKey() {
        return Keys.PK_AGENCY;
    }

    @Override
    public Agency as(String alias) {
        return new Agency(DSL.name(alias), this);
    }

    @Override
    public Agency as(Name alias) {
        return new Agency(alias, this);
    }

    @Override
    public Agency as(Table<?> alias) {
        return new Agency(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Agency rename(String name) {
        return new Agency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Agency rename(Name name) {
        return new Agency(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Agency rename(Table<?> name) {
        return new Agency(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, String, Agentlevel, Status, LocalDate> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Agentlevel, ? super Status, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Agentlevel, ? super Status, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
