/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.enums.Status;
import com.example.advertismentService.model.jooq.schema.tables.records.BuilderRecord;

import java.time.LocalDate;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Builder extends TableImpl<BuilderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.builder</code>
     */
    public static final Builder BUILDER_ENTITY = new Builder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuilderRecord> getRecordType() {
        return BuilderRecord.class;
    }

    /**
     * The column <code>public.builder.id</code>.
     */
    public final TableField<BuilderRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.builder.name</code>.
     */
    public final TableField<BuilderRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.builder.description</code>.
     */
    public final TableField<BuilderRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.builder.link_on_website</code>.
     */
    public final TableField<BuilderRecord, String> LINK_ON_WEBSITE = createField(DSL.name("link_on_website"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.builder.phone_number</code>.
     */
    public final TableField<BuilderRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.builder.status</code>.
     */
    public final TableField<BuilderRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.defaultValue(DSL.field("'REGISTERED'::status", SQLDataType.VARCHAR)).asEnumDataType(com.example.advertismentService.model.jooq.schema.enums.Status.class), this, "");

    /**
     * The column <code>public.builder.foundation_year</code>.
     */
    public final TableField<BuilderRecord, LocalDate> FOUNDATION_YEAR = createField(DSL.name("foundation_year"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.builder.insert_date</code>.
     */
    public final TableField<BuilderRecord, LocalDate> INSERT_DATE = createField(DSL.name("insert_date"), SQLDataType.LOCALDATE, this, "");

    private Builder(Name alias, Table<BuilderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Builder(Name alias, Table<BuilderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.builder</code> table reference
     */
    public Builder(String alias) {
        this(DSL.name(alias), BUILDER_ENTITY);
    }

    /**
     * Create an aliased <code>public.builder</code> table reference
     */
    public Builder(Name alias) {
        this(alias, BUILDER_ENTITY);
    }

    /**
     * Create a <code>public.builder</code> table reference
     */
    public Builder() {
        this(DSL.name("builder"), null);
    }

    public <O extends Record> Builder(Table<O> child, ForeignKey<O, BuilderRecord> key) {
        super(child, key, BUILDER_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BuilderRecord> getPrimaryKey() {
        return Keys.PK_BUILDER;
    }

    @Override
    public Builder as(String alias) {
        return new Builder(DSL.name(alias), this);
    }

    @Override
    public Builder as(Name alias) {
        return new Builder(alias, this);
    }

    @Override
    public Builder as(Table<?> alias) {
        return new Builder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Builder rename(String name) {
        return new Builder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Builder rename(Name name) {
        return new Builder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Builder rename(Table<?> name) {
        return new Builder(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, String, Status, LocalDate, LocalDate> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Status, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Status, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
