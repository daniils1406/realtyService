/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.enums.Realtytype;
import com.example.advertismentService.model.jooq.schema.tables.records.FlatRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flat extends TableImpl<FlatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.flat</code>
     */
    public static final Flat FLAT_ENTITY = new Flat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlatRecord> getRecordType() {
        return FlatRecord.class;
    }

    /**
     * The column <code>public.flat.id</code>.
     */
    public final TableField<FlatRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.flat.number_of_rooms</code>.
     */
    public final TableField<FlatRecord, Integer> NUMBER_OF_ROOMS = createField(DSL.name("number_of_rooms"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.flat.level</code>.
     */
    public final TableField<FlatRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.flat.kitchen_square</code>.
     */
    public final TableField<FlatRecord, Double> KITCHEN_SQUARE = createField(DSL.name("kitchen_square"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.flat.living_square</code>.
     */
    public final TableField<FlatRecord, Double> LIVING_SQUARE = createField(DSL.name("living_square"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.flat.flat_type</code>.
     */
    public final TableField<FlatRecord, Realtytype> FLAT_TYPE = createField(DSL.name("flat_type"), SQLDataType.VARCHAR.asEnumDataType(com.example.advertismentService.model.jooq.schema.enums.Realtytype.class), this, "");

    private Flat(Name alias, Table<FlatRecord> aliased) {
        this(alias, aliased, null);
    }

    private Flat(Name alias, Table<FlatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.flat</code> table reference
     */
    public Flat(String alias) {
        this(DSL.name(alias), FLAT_ENTITY);
    }

    /**
     * Create an aliased <code>public.flat</code> table reference
     */
    public Flat(Name alias) {
        this(alias, FLAT_ENTITY);
    }

    /**
     * Create a <code>public.flat</code> table reference
     */
    public Flat() {
        this(DSL.name("flat"), null);
    }

    public <O extends Record> Flat(Table<O> child, ForeignKey<O, FlatRecord> key) {
        super(child, key, FLAT_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<FlatRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FLAT_ID_KEY);
    }

    @Override
    public List<ForeignKey<FlatRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FLAT__FK_TOREALTY);
    }

    private transient Realty _realty;

    /**
     * Get the implicit join path to the <code>public.realty</code> table.
     */
    public Realty realty() {
        if (_realty == null)
            _realty = new Realty(this, Keys.FLAT__FK_TOREALTY);

        return _realty;
    }

    @Override
    public Flat as(String alias) {
        return new Flat(DSL.name(alias), this);
    }

    @Override
    public Flat as(Name alias) {
        return new Flat(alias, this);
    }

    @Override
    public Flat as(Table<?> alias) {
        return new Flat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Flat rename(String name) {
        return new Flat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flat rename(Name name) {
        return new Flat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flat rename(Table<?> name) {
        return new Flat(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, Integer, Integer, Double, Double, Realtytype> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super Integer, ? super Integer, ? super Double, ? super Double, ? super Realtytype, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super Integer, ? super Integer, ? super Double, ? super Double, ? super Realtytype, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
