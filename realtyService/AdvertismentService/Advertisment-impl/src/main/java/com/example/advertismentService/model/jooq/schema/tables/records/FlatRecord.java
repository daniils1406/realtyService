/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables.records;


import com.example.advertismentService.model.jooq.schema.enums.Realtytype;
import com.example.advertismentService.model.jooq.schema.tables.Flat;
import com.example.advertismentService.model.jooq.schema.tables.pojos.FlatEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlatRecord extends TableRecordImpl<FlatRecord> implements Record6<UUID, Integer, Integer, Double, Double, Realtytype> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.flat.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.flat.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.flat.number_of_rooms</code>.
     */
    public void setNumberOfRooms(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.flat.number_of_rooms</code>.
     */
    public Integer getNumberOfRooms() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.flat.level</code>.
     */
    public void setLevel(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.flat.level</code>.
     */
    public Integer getLevel() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.flat.kitchen_square</code>.
     */
    public void setKitchenSquare(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.flat.kitchen_square</code>.
     */
    public Double getKitchenSquare() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.flat.living_square</code>.
     */
    public void setLivingSquare(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.flat.living_square</code>.
     */
    public Double getLivingSquare() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>public.flat.flat_type</code>.
     */
    public void setFlatType(Realtytype value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.flat.flat_type</code>.
     */
    public Realtytype getFlatType() {
        return (Realtytype) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, Integer, Integer, Double, Double, Realtytype> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<UUID, Integer, Integer, Double, Double, Realtytype> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Flat.FLAT_ENTITY.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Flat.FLAT_ENTITY.NUMBER_OF_ROOMS;
    }

    @Override
    public Field<Integer> field3() {
        return Flat.FLAT_ENTITY.LEVEL;
    }

    @Override
    public Field<Double> field4() {
        return Flat.FLAT_ENTITY.KITCHEN_SQUARE;
    }

    @Override
    public Field<Double> field5() {
        return Flat.FLAT_ENTITY.LIVING_SQUARE;
    }

    @Override
    public Field<Realtytype> field6() {
        return Flat.FLAT_ENTITY.FLAT_TYPE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getNumberOfRooms();
    }

    @Override
    public Integer component3() {
        return getLevel();
    }

    @Override
    public Double component4() {
        return getKitchenSquare();
    }

    @Override
    public Double component5() {
        return getLivingSquare();
    }

    @Override
    public Realtytype component6() {
        return getFlatType();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getNumberOfRooms();
    }

    @Override
    public Integer value3() {
        return getLevel();
    }

    @Override
    public Double value4() {
        return getKitchenSquare();
    }

    @Override
    public Double value5() {
        return getLivingSquare();
    }

    @Override
    public Realtytype value6() {
        return getFlatType();
    }

    @Override
    public FlatRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public FlatRecord value2(Integer value) {
        setNumberOfRooms(value);
        return this;
    }

    @Override
    public FlatRecord value3(Integer value) {
        setLevel(value);
        return this;
    }

    @Override
    public FlatRecord value4(Double value) {
        setKitchenSquare(value);
        return this;
    }

    @Override
    public FlatRecord value5(Double value) {
        setLivingSquare(value);
        return this;
    }

    @Override
    public FlatRecord value6(Realtytype value) {
        setFlatType(value);
        return this;
    }

    @Override
    public FlatRecord values(UUID value1, Integer value2, Integer value3, Double value4, Double value5, Realtytype value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FlatRecord
     */
    public FlatRecord() {
        super(Flat.FLAT_ENTITY);
    }

    /**
     * Create a detached, initialised FlatRecord
     */
    public FlatRecord(UUID id, Integer numberOfRooms, Integer level, Double kitchenSquare, Double livingSquare, Realtytype flatType) {
        super(Flat.FLAT_ENTITY);

        setId(id);
        setNumberOfRooms(numberOfRooms);
        setLevel(level);
        setKitchenSquare(kitchenSquare);
        setLivingSquare(livingSquare);
        setFlatType(flatType);
    }

    /**
     * Create a detached, initialised FlatRecord
     */
    public FlatRecord(FlatEntity value) {
        super(Flat.FLAT_ENTITY);

        if (value != null) {
            setId(value.getId());
            setNumberOfRooms(value.getNumberOfRooms());
            setLevel(value.getLevel());
            setKitchenSquare(value.getKitchenSquare());
            setLivingSquare(value.getLivingSquare());
            setFlatType(value.getFlatType());
        }
    }
}
