/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Keys;
import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.enums.Status;
import com.example.advertismentService.model.jooq.schema.tables.records.ResidentialComplexRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResidentialComplex extends TableImpl<ResidentialComplexRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.residential_complex</code>
     */
    public static final ResidentialComplex RESIDENTIAL_COMPLEX_ENTITY = new ResidentialComplex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResidentialComplexRecord> getRecordType() {
        return ResidentialComplexRecord.class;
    }

    /**
     * The column <code>public.residential_complex.id</code>.
     */
    public final TableField<ResidentialComplexRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.residential_complex.city</code>.
     */
    public final TableField<ResidentialComplexRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.residential_complex.district</code>.
     */
    public final TableField<ResidentialComplexRecord, String> DISTRICT = createField(DSL.name("district"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.residential_complex.number_of_buildings</code>.
     */
    public final TableField<ResidentialComplexRecord, Integer> NUMBER_OF_BUILDINGS = createField(DSL.name("number_of_buildings"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.residential_complex.number_of_ready_buildings</code>.
     */
    public final TableField<ResidentialComplexRecord, Integer> NUMBER_OF_READY_BUILDINGS = createField(DSL.name("number_of_ready_buildings"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.residential_complex.builder_id</code>.
     */
    public final TableField<ResidentialComplexRecord, UUID> BUILDER_ID = createField(DSL.name("builder_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.residential_complex.name</code>.
     */
    public final TableField<ResidentialComplexRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.residential_complex.description</code>.
     */
    public final TableField<ResidentialComplexRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.residential_complex.link_on_website</code>.
     */
    public final TableField<ResidentialComplexRecord, String> LINK_ON_WEBSITE = createField(DSL.name("link_on_website"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.residential_complex.phone_number</code>.
     */
    public final TableField<ResidentialComplexRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.residential_complex.delivery_year</code>.
     */
    public final TableField<ResidentialComplexRecord, LocalDate> DELIVERY_YEAR = createField(DSL.name("delivery_year"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.residential_complex.status</code>.
     */
    public final TableField<ResidentialComplexRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(com.example.advertismentService.model.jooq.schema.enums.Status.class), this, "");

    /**
     * The column <code>public.residential_complex.region</code>.
     */
    public final TableField<ResidentialComplexRecord, Integer> REGION = createField(DSL.name("region"), SQLDataType.INTEGER, this, "");

    private ResidentialComplex(Name alias, Table<ResidentialComplexRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResidentialComplex(Name alias, Table<ResidentialComplexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.residential_complex</code> table reference
     */
    public ResidentialComplex(String alias) {
        this(DSL.name(alias), RESIDENTIAL_COMPLEX_ENTITY);
    }

    /**
     * Create an aliased <code>public.residential_complex</code> table reference
     */
    public ResidentialComplex(Name alias) {
        this(alias, RESIDENTIAL_COMPLEX_ENTITY);
    }

    /**
     * Create a <code>public.residential_complex</code> table reference
     */
    public ResidentialComplex() {
        this(DSL.name("residential_complex"), null);
    }

    public <O extends Record> ResidentialComplex(Table<O> child, ForeignKey<O, ResidentialComplexRecord> key) {
        super(child, key, RESIDENTIAL_COMPLEX_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ResidentialComplexRecord> getPrimaryKey() {
        return Keys.PK_RESIDENTIAL_COMPLEX;
    }

    @Override
    public List<ForeignKey<ResidentialComplexRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESIDENTIAL_COMPLEX__FK_TOBUILDER);
    }

    private transient Builder _builder;

    /**
     * Get the implicit join path to the <code>public.builder</code> table.
     */
    public Builder builder() {
        if (_builder == null)
            _builder = new Builder(this, Keys.RESIDENTIAL_COMPLEX__FK_TOBUILDER);

        return _builder;
    }

    @Override
    public ResidentialComplex as(String alias) {
        return new ResidentialComplex(DSL.name(alias), this);
    }

    @Override
    public ResidentialComplex as(Name alias) {
        return new ResidentialComplex(alias, this);
    }

    @Override
    public ResidentialComplex as(Table<?> alias) {
        return new ResidentialComplex(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResidentialComplex rename(String name) {
        return new ResidentialComplex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResidentialComplex rename(Name name) {
        return new ResidentialComplex(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResidentialComplex rename(Table<?> name) {
        return new ResidentialComplex(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, String, String, Integer, Integer, UUID, String, String, String, String, LocalDate, Status, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super UUID, ? super String, ? super String, ? super Integer, ? super Integer, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super Status, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super UUID, ? super String, ? super String, ? super Integer, ? super Integer, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super Status, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
