/*
 * This file is generated by jOOQ.
 */
package com.example.advertismentService.model.jooq.schema.tables;


import com.example.advertismentService.model.jooq.schema.Public;
import com.example.advertismentService.model.jooq.schema.tables.records.FavouritesRecord;

import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Favourites extends TableImpl<FavouritesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.favourites</code>
     */
    public static final Favourites FAVOURITES_ENTITY = new Favourites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FavouritesRecord> getRecordType() {
        return FavouritesRecord.class;
    }

    /**
     * The column <code>public.favourites.client_id</code>.
     */
    public final TableField<FavouritesRecord, UUID> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.favourites.realty_id</code>.
     */
    public final TableField<FavouritesRecord, UUID> REALTY_ID = createField(DSL.name("realty_id"), SQLDataType.UUID, this, "");

    private Favourites(Name alias, Table<FavouritesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Favourites(Name alias, Table<FavouritesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.favourites</code> table reference
     */
    public Favourites(String alias) {
        this(DSL.name(alias), FAVOURITES_ENTITY);
    }

    /**
     * Create an aliased <code>public.favourites</code> table reference
     */
    public Favourites(Name alias) {
        this(alias, FAVOURITES_ENTITY);
    }

    /**
     * Create a <code>public.favourites</code> table reference
     */
    public Favourites() {
        this(DSL.name("favourites"), null);
    }

    public <O extends Record> Favourites(Table<O> child, ForeignKey<O, FavouritesRecord> key) {
        super(child, key, FAVOURITES_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Favourites as(String alias) {
        return new Favourites(DSL.name(alias), this);
    }

    @Override
    public Favourites as(Name alias) {
        return new Favourites(alias, this);
    }

    @Override
    public Favourites as(Table<?> alias) {
        return new Favourites(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(String name) {
        return new Favourites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(Name name) {
        return new Favourites(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(Table<?> name) {
        return new Favourites(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
