/*
 * This file is generated by jOOQ.
 */
package com.example.authenticationService.model.jooq.schema.tables.records;


import com.example.authenticationService.model.jooq.schema.tables.Organisation;
import com.example.authenticationService.model.jooq.schema.tables.pojos.OrganisationEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganisationRecord extends TableRecordImpl<OrganisationRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.organisation.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.organisation.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.organisation.organisation_id</code>.
     */
    public void setOrganisationId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.organisation.organisation_id</code>.
     */
    public UUID getOrganisationId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Organisation.ORGANISATION_ENTITY.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Organisation.ORGANISATION_ENTITY.ORGANISATION_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getOrganisationId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getOrganisationId();
    }

    @Override
    public OrganisationRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public OrganisationRecord value2(UUID value) {
        setOrganisationId(value);
        return this;
    }

    @Override
    public OrganisationRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrganisationRecord
     */
    public OrganisationRecord() {
        super(Organisation.ORGANISATION_ENTITY);
    }

    /**
     * Create a detached, initialised OrganisationRecord
     */
    public OrganisationRecord(UUID id, UUID organisationId) {
        super(Organisation.ORGANISATION_ENTITY);

        setId(id);
        setOrganisationId(organisationId);
    }

    /**
     * Create a detached, initialised OrganisationRecord
     */
    public OrganisationRecord(OrganisationEntity value) {
        super(Organisation.ORGANISATION_ENTITY);

        if (value != null) {
            setId(value.getId());
            setOrganisationId(value.getOrganisationId());
        }
    }
}
