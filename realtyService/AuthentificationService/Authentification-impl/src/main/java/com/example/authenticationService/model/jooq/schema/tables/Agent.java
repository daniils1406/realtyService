/*
 * This file is generated by jOOQ.
 */
package com.example.authenticationService.model.jooq.schema.tables;


import com.example.authenticationService.model.jooq.schema.Keys;
import com.example.authenticationService.model.jooq.schema.Public;
import com.example.authenticationService.model.jooq.schema.enums.Agentlevel;
import com.example.authenticationService.model.jooq.schema.tables.records.AgentRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Agent extends TableImpl<AgentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.agent</code>
     */
    public static final Agent AGENT_ENTITY = new Agent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgentRecord> getRecordType() {
        return AgentRecord.class;
    }

    /**
     * The column <code>public.agent.experience</code>.
     */
    public final TableField<AgentRecord, Agentlevel> EXPERIENCE = createField(DSL.name("experience"), SQLDataType.VARCHAR.asEnumDataType(com.example.authenticationService.model.jooq.schema.enums.Agentlevel.class), this, "");

    /**
     * The column <code>public.agent.id</code>.
     */
    public final TableField<AgentRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.agent.agency_id</code>.
     */
    public final TableField<AgentRecord, UUID> AGENCY_ID = createField(DSL.name("agency_id"), SQLDataType.UUID, this, "");

    private Agent(Name alias, Table<AgentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Agent(Name alias, Table<AgentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.agent</code> table reference
     */
    public Agent(String alias) {
        this(DSL.name(alias), AGENT_ENTITY);
    }

    /**
     * Create an aliased <code>public.agent</code> table reference
     */
    public Agent(Name alias) {
        this(alias, AGENT_ENTITY);
    }

    /**
     * Create a <code>public.agent</code> table reference
     */
    public Agent() {
        this(DSL.name("agent"), null);
    }

    public <O extends Record> Agent(Table<O> child, ForeignKey<O, AgentRecord> key) {
        super(child, key, AGENT_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<AgentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AGENT__FK_TOCIANUSER);
    }

    private transient CianUser _cianUser;

    /**
     * Get the implicit join path to the <code>public.cian_user</code> table.
     */
    public CianUser cianUser() {
        if (_cianUser == null)
            _cianUser = new CianUser(this, Keys.AGENT__FK_TOCIANUSER);

        return _cianUser;
    }

    @Override
    public Agent as(String alias) {
        return new Agent(DSL.name(alias), this);
    }

    @Override
    public Agent as(Name alias) {
        return new Agent(alias, this);
    }

    @Override
    public Agent as(Table<?> alias) {
        return new Agent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Agent rename(String name) {
        return new Agent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Agent rename(Name name) {
        return new Agent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Agent rename(Table<?> name) {
        return new Agent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Agentlevel, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Agentlevel, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Agentlevel, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
