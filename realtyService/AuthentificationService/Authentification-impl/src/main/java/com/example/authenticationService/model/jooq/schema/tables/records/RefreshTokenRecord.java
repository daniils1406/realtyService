/*
 * This file is generated by jOOQ.
 */
package com.example.authenticationService.model.jooq.schema.tables.records;


import com.example.authenticationService.model.jooq.schema.tables.RefreshToken;
import com.example.authenticationService.model.jooq.schema.tables.pojos.RefreshTokenEntity;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshTokenRecord extends TableRecordImpl<RefreshTokenRecord> implements Record3<UUID, UUID, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.refresh_token.token</code>.
     */
    public void setToken(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.refresh_token.token</code>.
     */
    public UUID getToken() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.refresh_token.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.refresh_token.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.refresh_token.insert_date</code>.
     */
    public void setInsertDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.refresh_token.insert_date</code>.
     */
    public LocalDateTime getInsertDate() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.TOKEN;
    }

    @Override
    public Field<UUID> field2() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.INSERT_DATE;
    }

    @Override
    public UUID component1() {
        return getToken();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public LocalDateTime component3() {
        return getInsertDate();
    }

    @Override
    public UUID value1() {
        return getToken();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public LocalDateTime value3() {
        return getInsertDate();
    }

    @Override
    public RefreshTokenRecord value1(UUID value) {
        setToken(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value3(LocalDateTime value) {
        setInsertDate(value);
        return this;
    }

    @Override
    public RefreshTokenRecord values(UUID value1, UUID value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RefreshTokenRecord
     */
    public RefreshTokenRecord() {
        super(RefreshToken.REFRESH_TOKEN_ENTITY);
    }

    /**
     * Create a detached, initialised RefreshTokenRecord
     */
    public RefreshTokenRecord(UUID token, UUID userId, LocalDateTime insertDate) {
        super(RefreshToken.REFRESH_TOKEN_ENTITY);

        setToken(token);
        setUserId(userId);
        setInsertDate(insertDate);
    }

    /**
     * Create a detached, initialised RefreshTokenRecord
     */
    public RefreshTokenRecord(RefreshTokenEntity value) {
        super(RefreshToken.REFRESH_TOKEN_ENTITY);

        if (value != null) {
            setToken(value.getToken());
            setUserId(value.getUserId());
            setInsertDate(value.getInsertDate());
        }
    }
}
