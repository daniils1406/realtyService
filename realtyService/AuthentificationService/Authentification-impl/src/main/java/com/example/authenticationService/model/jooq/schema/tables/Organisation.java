/*
 * This file is generated by jOOQ.
 */
package com.example.authenticationService.model.jooq.schema.tables;


import com.example.authenticationService.model.jooq.schema.Keys;
import com.example.authenticationService.model.jooq.schema.Public;
import com.example.authenticationService.model.jooq.schema.tables.records.OrganisationRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organisation extends TableImpl<OrganisationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organisation</code>
     */
    public static final Organisation ORGANISATION_ENTITY = new Organisation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganisationRecord> getRecordType() {
        return OrganisationRecord.class;
    }

    /**
     * The column <code>public.organisation.id</code>.
     */
    public final TableField<OrganisationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.organisation.organisation_id</code>.
     */
    public final TableField<OrganisationRecord, UUID> ORGANISATION_ID = createField(DSL.name("organisation_id"), SQLDataType.UUID, this, "");

    private Organisation(Name alias, Table<OrganisationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Organisation(Name alias, Table<OrganisationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.organisation</code> table reference
     */
    public Organisation(String alias) {
        this(DSL.name(alias), ORGANISATION_ENTITY);
    }

    /**
     * Create an aliased <code>public.organisation</code> table reference
     */
    public Organisation(Name alias) {
        this(alias, ORGANISATION_ENTITY);
    }

    /**
     * Create a <code>public.organisation</code> table reference
     */
    public Organisation() {
        this(DSL.name("organisation"), null);
    }

    public <O extends Record> Organisation(Table<O> child, ForeignKey<O, OrganisationRecord> key) {
        super(child, key, ORGANISATION_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<OrganisationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORGANISATION__FK_TOCIANUSER);
    }

    private transient CianUser _cianUser;

    /**
     * Get the implicit join path to the <code>public.cian_user</code> table.
     */
    public CianUser cianUser() {
        if (_cianUser == null)
            _cianUser = new CianUser(this, Keys.ORGANISATION__FK_TOCIANUSER);

        return _cianUser;
    }

    @Override
    public Organisation as(String alias) {
        return new Organisation(DSL.name(alias), this);
    }

    @Override
    public Organisation as(Name alias) {
        return new Organisation(alias, this);
    }

    @Override
    public Organisation as(Table<?> alias) {
        return new Organisation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisation rename(String name) {
        return new Organisation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisation rename(Name name) {
        return new Organisation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisation rename(Table<?> name) {
        return new Organisation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
