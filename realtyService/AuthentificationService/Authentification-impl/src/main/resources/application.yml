spring:
  rabbitmq:
    host: ${RABBIT_HOST:localhost}
    port: ${RABBIT_PORT:5672}
    username: ${RABBIT_USERNAME:guest}
    password: ${RABBIT_PASSWORD:guest}
  mail:
    host: smtp.gmail.com
    port: 587
    userName: crmfpdamyyoosbms
    password: crmfpdamyyoosbms
    smtp:
      auth: true
      starttls:
        enable: true

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/AuthentificationService
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:Landrover2013}

  liquibase:
    change-log: classpath:db.changelog/changelog-master.xml
  data:
    rest:
      default-page-size: 5
    redis:
      repositories:
        enabled: false
  cache:
    type: redis
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 500
    database: 0

#  application:
#    name: authenticationService
#  cloud:
#    consul:
#      config:
#        enabled: false
#      host: ${CONSUL_HOST:127.0.0.1}
#      discovery:
#        instanceId: "${spring.application.name}-${server.port}-${spring.cloud.client.ip-address}"
#        prefer-ip-address: true
#        health-check-critical-timeout: "1m"

jwt:
  access_token_expires_time_minutes: 2
  refresh_token_expires_time: 180000
  verification_token_expires_time: 180000

management:
  health:
    redis:
      enabled: false

rsa:
  private-key: "classpath:certs/private_key.pem"
  public-key: "classpath:certs/public_key.pem"

service-rabbit:
  exchangeRegistration-name: exchangeRegistration
  queueRegistration-name: queueRegistration
  routingRegistration-key: keyRegistration
  exchangeResetPassword-name: exchangeResetPassword
  queueResetPassword-name: queueResetPassword
  routingResetPassword-key: keyResetPassword
  exchangeResetLogin-name: exchangeResetLogin
  queueResetLogin-name: queueResetLogin
  routingResetLogin-key: keyResetLogin
  exchangeNotification-name: exchangeNotification
  queueNotification-name: queueNotification
  routingNotification-key: keyNotification

#server:
#  port: 8080
#grpc:
#  documentServiceName: documentService
#  server:
#    port: 8090

