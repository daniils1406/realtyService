/*
 * This file is generated by jOOQ.
 */
package com.example.chatService.model.jooq.schema.tables.records;


import com.example.chatService.model.jooq.schema.tables.ChatAndUser;
import com.example.chatService.model.jooq.schema.tables.pojos.ChatAndUserEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatAndUserRecord extends TableRecordImpl<ChatAndUserRecord> implements Record3<UUID, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.chat_and_user.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.chat_and_user.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.chat_and_user.chat_id</code>.
     */
    public void setChatId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.chat_and_user.chat_id</code>.
     */
    public String getChatId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.chat_and_user.isAdmin</code>.
     */
    public void setIsadmin(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.chat_and_user.isAdmin</code>.
     */
    public Boolean getIsadmin() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ChatAndUser.CHAT_AND_USER_ENTITY.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return ChatAndUser.CHAT_AND_USER_ENTITY.CHAT_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return ChatAndUser.CHAT_AND_USER_ENTITY.ISADMIN;
    }

    @Override
    public UUID component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getChatId();
    }

    @Override
    public Boolean component3() {
        return getIsadmin();
    }

    @Override
    public UUID value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getChatId();
    }

    @Override
    public Boolean value3() {
        return getIsadmin();
    }

    @Override
    public ChatAndUserRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public ChatAndUserRecord value2(String value) {
        setChatId(value);
        return this;
    }

    @Override
    public ChatAndUserRecord value3(Boolean value) {
        setIsadmin(value);
        return this;
    }

    @Override
    public ChatAndUserRecord values(UUID value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChatAndUserRecord
     */
    public ChatAndUserRecord() {
        super(ChatAndUser.CHAT_AND_USER_ENTITY);
    }

    /**
     * Create a detached, initialised ChatAndUserRecord
     */
    public ChatAndUserRecord(UUID userId, String chatId, Boolean isadmin) {
        super(ChatAndUser.CHAT_AND_USER_ENTITY);

        setUserId(userId);
        setChatId(chatId);
        setIsadmin(isadmin);
    }

    /**
     * Create a detached, initialised ChatAndUserRecord
     */
    public ChatAndUserRecord(ChatAndUserEntity value) {
        super(ChatAndUser.CHAT_AND_USER_ENTITY);

        if (value != null) {
            setUserId(value.getUserId());
            setChatId(value.getChatId());
            setIsadmin(value.getIsadmin());
        }
    }
}
